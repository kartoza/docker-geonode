source_up
use_nix
# Infer overlay directory
# In the case that it was run from initial bootstrap package directory
current_dir="${PWD##*/}"

# Convention:
if [[ -f "$PWD/.build-dir" ]]; then
	echo "Running bootstrap phase from build dir: $PWD"

	export PROJECT_ROOT=$(realpath "../")
	export BOOTSTRAP_DIRECTORY=$(realpath "./bootstrap")
elif [[ -f "$PWD/.project-root" ]]; then
	echo "Running bootstrap phase from project root: $PWD"

	export PROJECT_ROOT=$(realpath "./")
	export BOOTSTRAP_DIRECTORY=$(realpath "./build/bootstrap")
elif [[ -f "$PWD/.bootstrap-dir" ]]; then
	echo "Running bootstrap phase from current bootstrap package: $PWD"

	export PROJECT_ROOT=$(realpath "../../../")
	export BOOTSTRAP_DIRECTORY=$(pwd)
elif [[ ("$current_dir" == "bootstrap") && (-f "$PWD/../.build-dir") ]]; then
	echo "Running bootstrap phase from bootstrap package in build dir: $PWD"

	export PROJECT_ROOT=$(realpath "../../")
	export BOOTSTRAP_DIRECTORY="$PWD"
else
	echo "Running bootstrap phase from source directory: $PWD"

	export PROJECT_ROOT=$(realpath "../../")
	export BOOTSTRAP_DIRECTORY=$(realpath "./bootstrap")
fi

export BUILD_DIRECTORY="${PROJECT_ROOT}/build"
export OVERLAY_DIRECTORY="${PROJECT_ROOT}/src"
export CURRENT_OVERLAY_SOURCE_DIRECTORY=${OVERLAY_DIRECTORY}/develop

echo "Context variables"
echo "PROJECT_ROOT"
printenv PROJECT_ROOT
echo "BUILD_DIRECTORY"
printenv BUILD_DIRECTORY
echo "OVERLAY_DIRECTORY"
printenv OVERLAY_DIRECTORY
echo "BOOTSTRAP_DIRECTORY"
printenv BOOTSTRAP_DIRECTORY

PATH_add "${BOOTSTRAP_DIRECTORY}/scripts"
path_add "PYTHONPATH" "${BOOTSTRAP_DIRECTORY}/python"


# Dependency check

if [[ -z "$(command -v docker)" ]]; then
	echo "You need docker installed!"
fi

# Build variables
export MAIN_APP_VERSION=3.2.1
export COMPONENT_VERSION=""
export APP_VERSION=${MAIN_APP_VERSION}
export VERSION="$(python -c 'from bootstrap import stdlib;print(stdlib.current_calendar_version())')"

export MAIN_PROJECT_NAME="geonode"
export PROJECT_NAME="${MAIN_PROJECT_NAME}"

if [[ -z "${DOCKERHUB_REPO}" ]]; then
	export DOCKERHUB_REPO="kartoza"
fi


# Documentation variables
source_env_if_exists "docs.envrc"

# local overrides
source_env_if_exists ".local.envrc"

dotenv_if_exists ".env"
dotenv_if_exists ".local.env"

# Docker Image variables

# Generate Full Image Tag for canonical tag
export CANONICAL_IMAGE_TAG=${DOCKERHUB_REPO}/${PROJECT_NAME}:${APP_VERSION//\//--}--${VERSION}
export LATEST_IMAGE_TAG=${DOCKERHUB_REPO}/${PROJECT_NAME}:latest
export MAJOR_IMAGE_TAG=${DOCKERHUB_REPO}/${PROJECT_NAME}:${APP_VERSION//\//--}--latest

if [[ -n "${IMAGE_VARIANT}" ]]; then
	export CANONICAL_VARIANT_IMAGE_TAG=${DOCKERHUB_REPO}/${PROJECT_NAME}:${IMAGE_VARIANT}--${APP_VERSION//\//--}--${VERSION}
	export LATEST_VARIANT_IMAGE_TAG=${DOCKERHUB_REPO}/${PROJECT_NAME}:${IMAGE_VARIANT}--latest
	export MAJOR_VARIANT_IMAGE_TAG=${DOCKERHUB_REPO}/${PROJECT_NAME}:${IMAGE_VARIANT}--${APP_VERSION//\//--}--latest
fi